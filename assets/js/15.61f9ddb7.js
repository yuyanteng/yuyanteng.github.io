(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{283:function(s,a,n){"use strict";n.r(a);var e=n(13),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"es7-es12的知识点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es7-es12的知识点"}},[s._v("#")]),s._v(" ES7-ES12的知识点")]),s._v(" "),n("hr"),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/7046217976176967711",target:"_blank",rel:"noopener noreferrer"}},[s._v("2022年了，这些ES7-ES12的知识点你都掌握了嘛？ - 掘金"),n("OutboundLink")],1)]),s._v(" "),n("h1",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),n("p",[s._v("听说现在大家在工作中ES6语法都已经用的炉火纯青了，那ES7-ES12的新特性你现在都用上了嘛？很多的新特性在开发中还是很实用的，也解决了很多js存在的问题。自己熬夜爆肝一个周末,总结出了ES7-ES12的语法，希望对你能有一定的帮助。最后，了解真相，你才能获得真正的自由！")]),s._v(" "),n("h1",{attrs:{id:"一、es2016-es7"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、es2016-es7"}},[s._v("#")]),s._v(" 一、ES2016(ES7)")]),s._v(" "),n("h2",{attrs:{id:"_1、array-prototype-includes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、array-prototype-includes"}},[s._v("#")]),s._v(" 1、Array.prototype.includes()")]),s._v(" "),n("p",[n("code",[s._v("includes()")]),s._v(" 方法用来判断一个数组是否包含一个指定的值，如果包含则返回 "),n("code",[s._v("true")]),s._v("，否则返回 "),n("code",[s._v("false")]),s._v("。")]),s._v(" "),n("h3",{attrs:{id:"语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("arr.includes(valueToFind[, fromIndex])\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("code",[s._v("valueToFind")]),s._v("，需要查找的元素值。")]),s._v(" "),n("p",[n("code",[s._v("fromIndex")]),s._v(" 可选 从"),n("code",[s._v("fromIndex")]),s._v(" 索引处开始查找 "),n("code",[s._v("valueToFind")]),s._v("。如果为负值（即从末尾开始往前跳 "),n("code",[s._v("fromIndex")]),s._v(" 的绝对值个索引，然后往后搜寻）。默认为 0。")]),s._v(" "),n("h3",{attrs:{id:"示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const arr = ['es6', 'es7', 'es8']\nconsole.log(arr.includes('es7')) // true\nconsole.log(arr.includes('es7', 1)) // true\nconsole.log(arr.includes('es7', 2)) // false\nconsole.log(arr.includes(\"es7\", -1)); // fsle\nconsole.log(arr.includes(\"es7\", -2)); // true\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"注意点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[s._v("#")]),s._v(" 注意点")]),s._v(" "),n("p",[s._v("使用 "),n("code",[s._v("includes()")]),s._v("查找字符串是区分大小写的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const arr = ["es6", "es7", "es8", "a"];\nconsole.log(arr.includes("A")); // false\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("使用 "),n("code",[s._v("includes()")]),s._v("只能判断简单类型的数据，对于复杂类型的数据，比如对象类型的数组，二维数组，这些是无法判断的.")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const arr = ['es6', ['es7', 'es8'], 'es9',{name:\"jimmy\"}]\nconsole.log(arr.includes([\"es7\", \"es8\"])); // false\nconsole.log(arr.includes({name:\"jimmy\"})); // false\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("能识别NaN，indexOf是不能识别NaN的")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const arr = ['es6', 'es7', NaN, 'es8']\nconsole.log(arr.includes(NaN)) // true\nconsole.log(arr.indexOf(NaN)) // -1\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("最后，如果只想知道某个值是否在数组中存在，而并不关心它的索引位置，建议使用includes(),如果想获取一个值在数组中的位置，那么使用indexOf方法。")]),s._v(" "),n("h2",{attrs:{id:"_2、幂运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、幂运算符"}},[s._v("#")]),s._v(" 2、幂运算符 **")]),s._v(" "),n("p",[s._v("比如我们想求2的10次方。")]),s._v(" "),n("h3",{attrs:{id:"自己写函数实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自己写函数实现"}},[s._v("#")]),s._v(" 自己写函数实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function pow(x, y) {\n    let result = 1\n    for (let i = 0; i < y; i++) {\n        result *= x\n    }\n    return result\n}\nconsole.log(pow(2, 10)) // 1024\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"math-pow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#math-pow"}},[s._v("#")]),s._v(" Math.pow()")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("console.log(Math.pow(2, 10)); // 1024\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"幂运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#幂运算符"}},[s._v("#")]),s._v(" 幂运算符 **")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("console.log(2 ** 10); // 1024\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("基本求幂")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("2 ** 3   // 8\n3 ** 2   // 9\n3 ** 2.5 // 15.588457268119896\n10 ** -1 // 0.1\nNaN ** 2 // NaN\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("注意")])]),s._v(" "),n("p",[s._v("幂运算符的两个*号之间不能出现空格，否则语法会报错。")]),s._v(" "),n("h1",{attrs:{id:"二、es2017-es8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、es2017-es8"}},[s._v("#")]),s._v(" 二、ES2017(ES8)")]),s._v(" "),n("h2",{attrs:{id:"_1、object-values"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、object-values"}},[s._v("#")]),s._v(" 1、Object.values()")]),s._v(" "),n("p",[n("code",[s._v("Object.values")]),s._v(" 方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = {\n  name: \"jimmy\",\n  age: 18,\n  height: 188,\n};\nconsole.log(Object.values(obj)); // [ 'jimmy', 18, 188 ]\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"_2、object-entries"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、object-entries"}},[s._v("#")]),s._v(" 2、Object.entries()")]),s._v(" "),n("p",[s._v("Object.entries() 方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键值对数组。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = {\n  name: \"jimmy\",\n  age: 18,\n  height: 188,\n};\nconsole.log(Object.entries(obj)); // [ [ 'name', 'jimmy' ], [ 'age', 18 ], [ 'height', 188 ] ]\nconsole.log(Object.entries([1, 2, 3])); // [ [ '0', 1 ], [ '1', 2 ], [ '2', 3 ] ]\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"_3、object-getownpropertydescriptors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、object-getownpropertydescriptors"}},[s._v("#")]),s._v(" 3、Object.getOwnPropertyDescriptors()")]),s._v(" "),n("p",[n("code",[s._v("Object.getOwnPropertyDescriptors()")]),s._v("  方法用来获取一个对象的所有自身属性的描述符。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = {\n  name: \"jimmy\",\n  age: 18,\n};\nconst desc = Object.getOwnPropertyDescriptors(obj);\nconsole.log(desc);\n// 打印结果\n{\n  name: {\n    value: 'jimmy',\n    writable: true,\n    enumerable: true,\n    configurable: true\n  },\n  age: {\n   value: 18,\n   writable: true,\n   enumerable: true,\n   configurable: true\n  }\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("上面打印结果中的")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("value")]),s._v("表示当前对象的默认值")]),s._v(" "),n("li",[n("code",[s._v("writable")]),s._v("表示对象属性是否可以修改")]),s._v(" "),n("li",[n("code",[s._v("enumerable")]),s._v("表示当前这个属性是否可以出现在对象的枚举属性中")]),s._v(" "),n("li",[n("code",[s._v("configurable")]),s._v("表示当前对象的属性能否用delete删除")])]),s._v(" "),n("p",[s._v("那这些对象的属性我们怎么设置和修改他们呢，我们可以使用es5的 "),n("code",[s._v("Object.defineProperty()")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const obj = {};\nObject.defineProperty(obj, "name", {\n  value: "jimmy",\n  writable: true,\n  configurable: true,\n  enumerable: true,\n});\nObject.defineProperty(obj, "age", {\n  value: 34,\n  writable: true,\n  configurable: true,\n  enumerable: true,\n});\nconsole.log(obj); // { name: \'jimmy\', age: 34 }\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("接下来我们演示下，一些属性设置为false的情况")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = {};\nObject.defineProperty(obj, \"name\", {\n  value: \"jimmy\",\n  writable: false,\n  configurable: false,\n  enumerable: true,\n});\nconsole.log(obj); // { name: 'jimmy' }\nobj.name = \"chimmy\";\nconsole.log(obj); // { name: 'jimmy' }\ndelete obj.name\nconsole.log(obj); // { name: 'jimmy' }\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("我们可以看到设置 writable: false和configurable: false,为false时，对象的name对象的值不能改变和不能被删除，打印出来还是原来的对象。")]),s._v(" "),n("p",[n("strong",[s._v("设置enumerable为false时")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const obj = {};\nObject.defineProperty(obj, "name", {\n  value: "jimmy",\n  writable: true,\n  configurable: true,\n  enumerable: false,\n});\nconsole.log(obj); // { }\nfor (let key in obj) {\n  console.log(key); // ""\n}\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("当设置enumerable: false时，表示对象的属性不可被枚举，这时打印对象为空，遍历对象的键也为空。")]),s._v(" "),n("h2",{attrs:{id:"_4、string-prototype-padstart"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、string-prototype-padstart"}},[s._v("#")]),s._v(" 4、String.prototype.padStart")]),s._v(" "),n("p",[s._v("把指定字符串填充到字符串头部，返回新字符串。")]),s._v(" "),n("h3",{attrs:{id:"语法-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法-2"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),n("p",[s._v("str.padStart(targetLength [, padString])")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("targetLength")])])]),s._v(" "),n("p",[s._v("当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("padString")]),s._v(" 可选")])]),s._v(" "),n("p",[s._v('填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 " "')]),s._v(" "),n("h3",{attrs:{id:"示例-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('\'abc\'.padStart(10);         // "       abc"\n\'abc\'.padStart(10, "foo");  // "foofoofabc"\n\'abc\'.padStart(6,"123465"); // "123abc"\n\'abc\'.padStart(8, "0");     // "00000abc"\n\'abc\'.padStart(1);          // "abc"\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),n("p",[s._v("日期格式化：yyyy-mm-dd的格式：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const now = new Date()\nconst year = now.getFullYear()\n// 月份和日期 如果是一位前面给它填充一个0\nconst month = (now.getMonth() + 1).toString().padStart(2, '0')\nconst day = (now.getDate()).toString().padStart(2, '0')\nconsole.log(year, month, day)\nconsole.log( `${year}-${month}-${day}` ) //输入今天的日期 2021-12-31\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("数字替换(手机号，银行卡号等）")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const tel = '18781268679'\nconst newTel = tel.slice(-4).padStart(tel.length, '*')\nconsole.log(newTel) // *******5678\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"_5、string-prototype-padend"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、string-prototype-padend"}},[s._v("#")]),s._v(" 5、String.prototype.padEnd")]),s._v(" "),n("p",[s._v("把指定字符串填充到字符串尾部，返回新字符串。")]),s._v(" "),n("p",[s._v("语法同上")]),s._v(" "),n("h3",{attrs:{id:"示例-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-3"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('\'abc\'.padEnd(10);          // "abc       "\n\'abc\'.padEnd(10, "foo");   // "abcfoofoof"\n\'abc\'.padEnd(6, "123456"); // "abc123"\n\'abc\'.padEnd(1);           // "abc"\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"应用场景-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-2"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),n("p",[s._v("在JS前端我们处理时间戳的时候单位是ms毫秒，但是，后端同学返回的时间戳则不一样是毫秒，可能只有10位，以s秒为单位。所以，我们在前端处理这个时间戳的时候，保险起见，要先做一个13位的补全，保证单位是毫秒。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 伪代码\nconsole.log(new Date().getTime()) // 时间戳 13位的\ntimestamp = +String(timestamp).padEnd(13, '0')\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"_6、尾逗号-trailing-commas"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、尾逗号-trailing-commas"}},[s._v("#")]),s._v(" 6、尾逗号 Trailing commas")]),s._v(" "),n("p",[s._v("ES8 允许函数的最后一个参数有尾逗号（Trailing comma）。\n此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function clownsEverywhere(\n    param1,\n    param2\n) {\n    /* ... */\n}\n\nclownsEverywhere(\n    'foo',\n    'bar'\n)\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("上面代码中，如果在param2或bar后面加一个逗号，就会报错。")]),s._v(" "),n("p",[s._v("如果像上面这样，将参数写成多行（即每个参数占据一行），以后修改代码的时候，想为函数clownsEverywhere添加第三个参数，或者调整参数的次序，就势必要在原来最后一个参数后面添加一个逗号。这对于版本管理系统来说，就会显示添加逗号的那一行也发生了变动。这看上去有点冗余，因此新的语法允许定义和调用时，尾部直接可以加上一个逗号。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function clownsEverywhere(\n    param1,\n    param2,\n) {\n    /* ... */\n}\n\nclownsEverywhere(\n    'foo',\n    'bar',\n)\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("这样的规定也使得，函数参数与数组和对象的尾逗号规则，保持一致了。")]),s._v(" "),n("h2",{attrs:{id:"_7、async-await"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、async-await"}},[s._v("#")]),s._v(" 7、async/await")]),s._v(" "),n("h3",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),n("p",[s._v("我们都知道使用 Promise 能很好地解决回调地狱的问题，但如果处理流程比较复杂的话，那么整段代码将充斥着 then，语义化不明显，代码不能很好地表示执行流程，那有没有比 Promise 更优雅的异步方式呢？那就是async/await！我们一起来揭开它神秘的面撒吧！")]),s._v(" "),n("p",[s._v("前面添加了async的函数在执行后都会自动返回一个Promise对象:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function foo() {\n    return 'jimmy'\n}\nconsole.log(foo()) // 'jimmy'\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("添加async后")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("async function foo() {\n    return 'jimmy' // Promise.resolve('jimmy')\n}\nconsole.log(foo()) // Promise\nfoo()\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("async函数中使用await，那么await这里的代码就会变成同步的了，意思就是说只有等await后面的Promise执行完成得到结果才会继续下去，await就是等待。请看下面的示例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function timeout() {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            console.log(1)\n            resolve()\n        }, 1000)\n    })\n}\n\n// 不加async和await是2、1   加了是1、2\nasync function foo() {\n    await timeout()\n    console.log(2)\n}\nfoo()\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h3",{attrs:{id:"使用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[s._v("#")]),s._v(" 使用场景")]),s._v(" "),n("p",[s._v("假如有这样一个使用场景：需要先请求 a 链接，等返回信息之后，再请求 b 链接的另外一个资源。下面代码展示的是使用 fetch 来实现这样的需求，fetch 被定义在 window 对象中，它返回的是一个 Promise 对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("fetch('https://blog.csdn.net/')\n  .then(response => {\n    console.log(response)\n    return fetch('https://juejin.im/')\n  })\n  .then(response => {\n    console.log(response)\n  })\n  .catch(error => {\n    console.log(error)\n  })\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("虽然上述代码可以实现这个需求，但语义化不明显，代码不能很好地表示执行流程。基于这个原因，ES8 引入了 async/await，这是 JavaScript 异步编程的一个重大改进，提供了在不阻塞主线程的情况下使用同步代码实现异步访问资源的能力，并且使得代码逻辑更加清晰。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("async function foo () {\n  try {\n    let response1 = await fetch('https://blog.csdn.net/')\n    console.log(response1)\n    let response2 = await fetch('https://juejin.im/')\n    console.log(response2)\n  } catch (err) {\n    console.error(err)\n  }\n}\nfoo()\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("通过上面代码，你会发现整个异步处理的逻辑都是使用同步代码的方式来实现的，而且还支持 try catch 来捕获异常，这感觉就在写同步代码，所以是非常符合人的线性思维的。")]),s._v(" "),n("h3",{attrs:{id:"注意点-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意点-2"}},[s._v("#")]),s._v(" 注意点")]),s._v(" "),n("ul",[n("li",[s._v("await 只能在 async 标记的函数内部使用，单独使用会触发 Syntax error。")]),s._v(" "),n("li",[s._v("await后面需要跟异步操作，不然就没有意义，而且await后面的Promise对象不必写then，因为await的作用之一就是获取后面Promise对象成功状态传递出来的参数。")])]),s._v(" "),n("h3",{attrs:{id:"async-await的缺陷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#async-await的缺陷"}},[s._v("#")]),s._v(" async/await的缺陷")]),s._v(" "),n("p",[s._v("了解"),n("code",[s._v("Async/await")]),s._v("是非常有用的，但还有一些缺点需要考虑。")]),s._v(" "),n("p",[n("code",[s._v("Async/await")]),s._v(" 让你的代码看起来是同步的，在某种程度上，也使得它的行为更加地同步。 "),n("code",[s._v("await")]),s._v(" 关键字会阻塞其后的代码，直到promise完成，就像执行同步操作一样。它确实可以允许其他任务在此期间继续运行，但您自己的代码被阻塞。")]),s._v(" "),n("p",[s._v("这意味着您的代码可能会因为大量"),n("code",[s._v("await")]),s._v("的promises相继发生而变慢。每个"),n("code",[s._v("await")]),s._v("都会等待前一个完成，而你实际想要的是所有的这些promises同时开始处理（就像我们没有使用"),n("code",[s._v("async/await")]),s._v("时那样）。")]),s._v(" "),n("p",[s._v("有一种模式可以缓解这个问题——通过将 "),n("code",[s._v("Promise")]),s._v(" 对象存储在变量中来同时开始它们，然后等待它们全部执行完毕。如果想更加深入的了解，请参考 "),n("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FLearn%2FJavaScript%2FAsynchronous%2FAsync_await%23asyncawait%25E7%259A%2584%25E7%25BC%25BA%25E9%2599%25B7",target:"_blank",rel:"noopener noreferrer"}},[s._v("MDN"),n("OutboundLink")],1)]),s._v(" "),n("h1",{attrs:{id:"三、es2018-es9"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、es2018-es9"}},[s._v("#")]),s._v(" 三、ES2018(ES9)")]),s._v(" "),n("h2",{attrs:{id:"_1、object-rest-spread"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、object-rest-spread"}},[s._v("#")]),s._v(" 1、Object Rest & Spread")]),s._v(" "),n("p",[s._v("在 ES9 新增 Object 的 Rest & Spread 方法，直接看下示例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const input = {\n  a: 1,\n  b: 2,\n  c: 3,\n}\n\nconst output = {\n  ...input,\n  c: 4\n}\n\nconsole.log(output) // {a: 1, b: 2, c: 4}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("这块代码展示了 spread 语法，可以把 input 对象的数据都拓展到 output 对象，这个功能很实用。需要注意的是，"),n("strong",[s._v("如果存在相同的属性名，只有最后一个会生效")]),s._v("。")]),s._v(" "),n("h3",{attrs:{id:"注意点-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意点-3"}},[s._v("#")]),s._v(" 注意点")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const obj = { x: { y: 10 } };\nconst copy1 = { ...obj };\nconst copy2 = { ...obj };\nobj.x.y = "jimmy";\nconsole.log(copy1, copy2); // x: {y: "jimmy"} x: {y: "jimmy"}\nconsole.log(copy1.x === copy2.x); // → true\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("如果属性的值是一个对象的话，该对象的引用会被拷贝，而不是生成一个新的对象。")]),s._v(" "),n("p",[s._v("我们再来看下 "),n("code",[s._v("Object rest")]),s._v(" 的示例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const input = {\n  a: 1,\n  b: 2,\n  c: 3\n}\n\nlet { a, ...rest } = input\n\nconsole.log(a, rest) // 1 {b: 2, c: 3}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("当对象 key-value 不确定的时候，把必选的 key 赋值给变量，用一个变量收敛其他可选的 key 数据，这在之前是做不到的。注意，"),n("strong",[s._v("rest 属性必须始终出现在对象的末尾")]),s._v("，否则将抛出错误。")]),s._v(" "),n("h2",{attrs:{id:"_2、for-await-of"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、for-await-of"}},[s._v("#")]),s._v(" 2、for await of")]),s._v(" "),n("p",[s._v("异步迭代器(for-await-of)：循环等待每个Promise对象变为resolved状态才进入下一步。")]),s._v(" "),n("p",[s._v("我们知道 for...of 是同步运行的，看如下代码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function TimeOut(time){\n    return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve(time)\n        }, time)\n    })\n}\n\nasync function test() {\n    let arr = [TimeOut(2000), TimeOut(1000), TimeOut(3000)]\n    for (let item of arr) {\n     console.log(Date.now(),item.then(console.log))\n    }\n}\n\ntest()\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("上面打印结果如下图")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9770e5600d0455c987be604f0d623cb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9770e5600d0455c987be604f0d623cb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("上述代码证实了 for of 方法不能遍历异步迭代器，得到的结果并不是我们所期待的，于是 for await of 就粉墨登场啦！")]),s._v(" "),n("p",[n("strong",[s._v("ES9 中可以用 for...await...of 的语法来操作")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function TimeOut(time) {\n    return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve(time)\n        }, time)\n    })\n}\n\nasync function test() {\n    let arr = [TimeOut(2000), TimeOut(1000), TimeOut(3000)]\n    for await (let item of arr) {\n        console.log(Date.now(), item)\n    }\n}\ntest()\n// 1560092345730 2000\n// 1560092345730 1000\n// 1560092346336 3000\n\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("for await of 环等待每个Promise对象变为resolved状态才进入下一步。所有打印的结果为 2000，1000，3000")]),s._v(" "),n("h2",{attrs:{id:"_3、promise-prototype-finally"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、promise-prototype-finally"}},[s._v("#")]),s._v(" 3、Promise.prototype.finally()")]),s._v(" "),n("p",[s._v("Promise.prototype.finally() 方法返回一个Promise，在promise执行结束时，无论结果是fulfilled或者是rejected，在执行then()和catch()后，都会执行finally指定的回调函数。这为指定执行完promise后，无论结果是fulfilled还是rejected都需要执行的代码提供了一种方式，避免同样的语句需要在then()和catch()中各写一次的情况。")]),s._v(" "),n("h3",{attrs:{id:"示例-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-4"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("new Promise((resolve, reject) => {\n    setTimeout(() => {\n        resolve('success')\n        // reject('fail')\n    }, 1000)\n}).then(res => {\n    console.log(res)\n}).catch(err => {\n    console.log(err)\n}).finally(() => {\n    console.log('finally')\n})\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"使用场景-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-2"}},[s._v("#")]),s._v(" 使用场景")]),s._v(" "),n("p",[n("strong",[s._v("loading关闭")])]),s._v(" "),n("p",[s._v("需要每次发送请求，都会有loading提示，请求发送完毕，就需要关闭loading提示框，不然界面就无法被点击。不管请求成功或是失败，这个loading都需要关闭掉，这时把关闭loading的代码写在finally里再合适不过了")]),s._v(" "),n("h2",{attrs:{id:"_4、string-扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、string-扩展"}},[s._v("#")]),s._v(" 4、String 扩展")]),s._v(" "),n("p",[s._v("放松对标签模板里字符串转义的限制, 遇到不合法的字符串转义会返回undefined，并且从raw上可获取原字符串。")]),s._v(" "),n("p",[s._v("下面是一个es6 的标签模板 如果对这个语法感到陌生，请参考 "),n("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fstring%23%25E6%25A0%2587%25E7%25AD%25BE%25E6%25A8%25A1%25E6%259D%25BF",target:"_blank",rel:"noopener noreferrer"}},[s._v("标签模板"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const foo = (a, b, c) => {\n    console.log(a)\n    console.log(b)\n    console.log(c)\n}\nconst name = 'jimmy'\nconst age = 18\nfoo `这是${name},他的年龄是${age}岁`\n\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("参数打印如下：")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6db7b7356279465d85c197b9d284425d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6db7b7356279465d85c197b9d284425d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("ES9开始，模板字符串允许嵌套支持常见转义序列，移除对ECMAScript在带标签的模版字符串中转义序列的语法限制。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function foo(a, b, c) {\n    console.log(a, b, c)\n}\n// 在标签函数中使用\n// unicode字符\\u{61} 对应的值为 a\n// unicode字符\\u{62} 对应的值为 b\n// \\unicode 是一个无效的unicode字符\nfoo `\\u{61} and \\u{62}`\nfoo `\\u{61} and \\unicode`\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("a",{attrs:{href:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d484a5ff27d4001948e2f7955d3ba7c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d484a5ff27d4001948e2f7955d3ba7c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?"),n("OutboundLink")],1)]),s._v(" "),n("h3",{attrs:{id:"注意点-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意点-4"}},[s._v("#")]),s._v(" 注意点")]),s._v(" "),n("p",[s._v("在模板字符串中，如果输入无效的unicode字符，还是会报错。只有在便签模板中 从es9开始才不会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(" let string = `\\u{61} and \\unicode`;\n console.log(string); // Uncaught SyntaxError: Invalid Unicode escape sequence\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h1",{attrs:{id:"四、es2019-es10"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、es2019-es10"}},[s._v("#")]),s._v(" 四、ES2019(ES10)")]),s._v(" "),n("h2",{attrs:{id:"_1、object-fromentries"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、object-fromentries"}},[s._v("#")]),s._v(" 1、Object.fromEntries()")]),s._v(" "),n("p",[s._v("方法 Object.fromEntries() 把键值对列表转换为一个对象，这个方法是和 Object.entries() 相对的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.fromEntries([\n    ['foo', 1],\n    ['bar', 2]\n])\n// {foo: 1, bar: 2}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"案例1-object-转换操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例1-object-转换操作"}},[s._v("#")]),s._v(" 案例1：Object 转换操作")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = {\n    name: 'jimmy',\n    age: 18\n}\nconst entries = Object.entries(obj)\nconsole.log(entries)\n// [Array(2), Array(2)]\n\n// ES10\nconst fromEntries = Object.fromEntries(entries)\nconsole.log(fromEntries)\n// {name: \"jimmy\", age: 18}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"案例2-map-转-object"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例2-map-转-object"}},[s._v("#")]),s._v(" 案例2：Map 转 Object")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const map = new Map()\nmap.set('name', 'jimmy')\nmap.set('age', 18)\nconsole.log(map) // {'name' => 'jimmy', 'age' => 18}\n\nconst obj = Object.fromEntries(map)\nconsole.log(obj)\n// {name: \"jimmy\", age: 18}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"案例3-过滤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例3-过滤"}},[s._v("#")]),s._v(" 案例3：过滤")]),s._v(" "),n("p",[s._v("course表示所有课程，想请求课程分数大于80的课程组成的对象：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const course = {\n    math: 80,\n    english: 85,\n    chinese: 90\n}\nconst res = Object.entries(course).filter(([key, val]) => val > 80)\nconsole.log(res) // [ [ 'english', 85 ], [ 'chinese', 90 ] ]\nconsole.log(Object.fromEntries(res)) // { english: 85, chinese: 90 }\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"案例4-url的search参数转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例4-url的search参数转换"}},[s._v("#")]),s._v(" 案例4：url的search参数转换")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// let url = \"https://www.baidu.com?name=jimmy&age=18&height=1.88\"\n// queryString 为 window.location.search\nconst queryString = \"?name=jimmy&age=18&height=1.88\";\nconst queryParams = new URLSearchParams(queryString);\nconst paramObj = Object.fromEntries(queryParams);\nconsole.log(paramObj); // { name: 'jimmy', age: '18', height: '1.88' }\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"_2、array-prototype-flat"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、array-prototype-flat"}},[s._v("#")]),s._v(" 2、Array.prototype.flat()")]),s._v(" "),n("h3",{attrs:{id:"语法-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法-3"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let newArray = arr.flat([depth])\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("depth")]),s._v(" 可选")])]),s._v(" "),n("p",[s._v("指定要提取嵌套数组的结构深度，默认值为 1。")]),s._v(" "),n("h3",{attrs:{id:"示例-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-5"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),n("p",[n("code",[s._v("flat()")]),s._v("  方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const arr1 = [0, 1, 2, [3, 4]];\nconsole.log(arr1.flat());  //  [0, 1, 2, 3, 4]\nconst arr2 = [0, 1, 2, [[[3, 4]]]];\nconsole.log(arr2.flat(2));  //  [0, 1, 2, [3, 4]]\n\n//使用 Infinity，可展开任意深度的嵌套数组\nvar arr4 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];\narr4.flat(Infinity); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n// `flat()` 方法会移除数组中的空项:\nvar arr5 = [1, 2, , 4, 5];\narr5.flat(); // [1, 2, 4, 5]\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h2",{attrs:{id:"_3、array-prototype-flatmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、array-prototype-flatmap"}},[s._v("#")]),s._v(" 3、Array.prototype.flatMap()")]),s._v(" "),n("p",[s._v("flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。从方法的名字上也可以看出来它包含两部分功能一个是 map，一个是 flat（深度为1）。")]),s._v(" "),n("h3",{attrs:{id:"语法-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法-4"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var new_array = arr.flatMap(function callback(currentValue[, index[, array]]) {\n    // 返回新数组的元素\n}[, thisArg])\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("callback")])])]),s._v(" "),n("p",[s._v("可以生成一个新数组中的元素的函数，可以传入三个参数：")]),s._v(" "),n("p",[n("code",[s._v("currentValue")])]),s._v(" "),n("p",[s._v("当前正在数组中处理的元素")]),s._v(" "),n("p",[n("code",[s._v("index")])]),s._v(" "),n("p",[s._v("可选 数组中正在处理的当前元素的索引。")]),s._v(" "),n("p",[n("code",[s._v("array")])]),s._v(" "),n("p",[s._v("可选   被调用的 "),n("code",[s._v("map")]),s._v(" 数组")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("thisArg")]),s._v("可选")])]),s._v(" "),n("p",[s._v("执行 "),n("code",[s._v("callback")]),s._v(" 函数时 使用的"),n("code",[s._v("this")]),s._v(" 值。")]),s._v(" "),n("h3",{attrs:{id:"示例-6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-6"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const numbers = [1, 2, 3]\nnumbers.map(x => [x * 2]) // [[2], [4], [6]]\nnumbers.flatMap(x => [x * 2]) // [2, 4, 6]\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("这个示例可以简单对比下 map 和 flatMap 的区别。当然还可以看下下面的示例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let arr = [\'今天天气不错\', \'\', \'早上好\']\narr.map(s => s.split(\'\'))\n// [["今", "天", "天", "气", "不", "错"],[""],["早", "上", "好"]]\narr.flatMap(s => s.split(\'\'))\n// ["今", "天", "天", "气", "不", "错", "", "早", "上", "好"]\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("code",[s._v("flatMap")]),s._v(" 方法与 "),n("code",[s._v("map")]),s._v(" 方法和深度depth为1的 "),n("code",[s._v("flat")]),s._v(" 几乎相同.")]),s._v(" "),n("h2",{attrs:{id:"_4、string-prototype-trimstart"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、string-prototype-trimstart"}},[s._v("#")]),s._v(" 4、String.prototype.trimStart()")]),s._v(" "),n("p",[s._v("trimStart() 方法从字符串的开头删除空格，trimLeft()是此方法的别名。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let str = '   foo  '\nconsole.log(str.length) // 8\nstr = str.trimStart() // 或str.trimLeft()\nconsole.log(str.length) // 5\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"_5、string-prototype-trimend"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、string-prototype-trimend"}},[s._v("#")]),s._v(" 5、String.prototype.trimEnd()")]),s._v(" "),n("p",[s._v("trimEnd() 方法从一个字符串的右端移除空白字符，trimRight 是 trimEnd 的别名。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let str = '   foo  '\nconsole.log(str.length) // 8\nstr = str.trimEnd() // 或str.trimRight()\nconsole.log(str.length) // 6\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"_6、可选的catch-binding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、可选的catch-binding"}},[s._v("#")]),s._v(" 6、可选的Catch Binding")]),s._v(" "),n("p",[s._v("在 ES10 之前我们都是这样捕获异常的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("try {\n    // tryCode\n} catch (err) {\n    // catchCode\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("在这里 err 是必须的参数，在 ES10 可以省略这个参数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("try {\n    console.log('Foobar')\n} catch {\n    console.error('Bar')\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[s._v("#")]),s._v(" 应用")]),s._v(" "),n("p",[n("strong",[s._v("验证参数是否为json格式")])]),s._v(" "),n("p",[s._v("这个需求我们只需要返回true或false，并不关心catch的参数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const validJSON = json => {\n    try {\n        JSON.parse(json)\n        return true\n    } catch {\n        return false\n    }\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"_7、symbol-prototype-description"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、symbol-prototype-description"}},[s._v("#")]),s._v(" 7、Symbol.prototype.description")]),s._v(" "),n("p",[s._v("我们知道，Symbol 的描述只被存储在内部的 "),n("code",[s._v("Description")]),s._v(" ，没有直接对外暴露，我们只有调用 Symbol 的 toString() 时才可以读取这个属性：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const name = Symbol('es')\nconsole.log(name.toString()) // Symbol(es)\nconsole.log(name) // Symbol(es)\nconsole.log(name === 'Symbol(es)') // false\nconsole.log(name.toString() === 'Symbol(es)') // true\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("现在可以通过 description 方法获取 Symbol 的描述:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const name = Symbol('es')\nconsole.log(name.description) // es\nname.description = \"es2\" // 只读属性 并不能修改描述符\nconsole.log(name.description === 'es') // true\n// 如果没有描述符 输入undefined\nconst s2 = Symbol()\nconsole.log(s2.description) // undefined\n\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"_8、json-stringify-增强能力"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8、json-stringify-增强能力"}},[s._v("#")]),s._v(" 8、JSON.stringify() 增强能力")]),s._v(" "),n("p",[s._v("JSON.stringify 在 ES10 修复了对于一些超出范围的 Unicode 展示错误的问题。因为 JSON 都是被编码成 UTF-8，所以遇到 0xD800–0xDFFF 之内的字符会因为无法编码成 UTF-8 进而导致显示错误。在 ES10 它会用转义字符的方式来处理这部分字符而非编码的方式，这样就会正常显示了。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// \\uD83D\\uDE0E  emoji 多字节的一个字符\nconsole.log(JSON.stringify('\\uD83D\\uDE0E')) // 打印出笑脸\n\n// 如果我们只去其中的一部分  \\uD83D 这其实是个无效的字符串\n// 之前的版本 ，这些字符将替换为特殊字符，而现在将未配对的代理代码点表示为JSON转义序列\nconsole.log(JSON.stringify('\\uD83D')) // \"\\ud83d\"\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"_9、修订-function-prototype-tostring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9、修订-function-prototype-tostring"}},[s._v("#")]),s._v(" 9、修订 Function.prototype.toString()")]),s._v(" "),n("p",[s._v("以前函数的toString方法来自Object.prototype.toString(),现在的\nFunction.prototype.toString() 方法返回一个表示当前函数源代码的字符串。以前只会返回这个函数，不包含注释、空格等。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function foo() {\n    // es10新特性\n    console.log('imooc')\n}\nconsole.log(foo.toString())\n// 打印如下\n// function foo() {\n//  // es10新特性\n//  console.log(\"imooc\");\n// }\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("将返回注释、空格和语法等详细信息。")]),s._v(" "),n("h1",{attrs:{id:"五、es2020-es11"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、es2020-es11"}},[s._v("#")]),s._v(" 五、ES2020(ES11)")]),s._v(" "),n("h2",{attrs:{id:"_1、空值合并运算符-nullish-coalescing-operator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、空值合并运算符-nullish-coalescing-operator"}},[s._v("#")]),s._v(" 1、空值合并运算符（Nullish coalescing Operator）")]),s._v(" "),n("p",[n("strong",[s._v("空值合并操作符")]),s._v("（ "),n("code",[s._v("??")]),s._v(" ）是一个逻辑操作符，当左侧的操作数为 "),n("code",[s._v("null")]),s._v("或者"),n("code",[s._v("undefined")]),s._v("时，返回其右侧操作数，否则返回左侧操作数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const foo = undefined ?? "foo"\nconst bar = null ?? "bar"\nconsole.log(foo) // foo\nconsole.log(bar) // bar\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("与逻辑或操作符（"),n("code",[s._v("||")]),s._v("）不同，逻辑或操作符会在左侧操作数为假值时返回右侧操作数。也就是说，如果使用 "),n("code",[s._v("||")]),s._v(" 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如"),n("code",[s._v("''")]),s._v(","),n("code",[s._v("0")]),s._v(","),n("code",[s._v("NaN")]),s._v(","),n("code",[s._v("false")]),s._v("）时。见下面的例子。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const foo = "" ?? \'default string\';\nconst foo2 = "" || \'default string\';\nconsole.log(foo); // ""\nconsole.log(foo2); // "default string"\n\nconst baz = 0 ?? 42;\nconst baz2 = 0 || 42;\nconsole.log(baz); // 0\nconsole.log(baz2); // 42\n\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"注意点-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意点-5"}},[s._v("#")]),s._v(" 注意点")]),s._v(" "),n("p",[s._v("将 "),n("code",[s._v("??")]),s._v(" 直接与 AND（"),n("code",[s._v("&&")]),s._v("）和 OR（"),n("code",[s._v("||")]),s._v("）操作符组合使用是不可取的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('null || undefined ?? "foo"; // 抛出 SyntaxError\ntrue || undefined ?? "foo"; // 抛出 SyntaxError\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"_2、可选链-optional-chaining"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、可选链-optional-chaining"}},[s._v("#")]),s._v(" 2、可选链 Optional chaining")]),s._v(" "),n("h3",{attrs:{id:"介绍-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-2"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),n("p",[n("strong",[s._v("可选链")]),s._v("操作符( "),n("code",[s._v("?.")]),s._v(" )允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。"),n("code",[s._v("?.")]),s._v(" 操作符的功能类似于 "),n("code",[s._v(".")]),s._v(" 链式操作符，不同之处在于，在引用为 "),n("code",[s._v("null")]),s._v(" 或者 "),n("code",[s._v("undefined")]),s._v(" 的情况下不会引起错误，该表达式短路返回值是 "),n("code",[s._v("undefined")]),s._v("。与函数调用一起使用时，如果给定的函数不存在，则返回 "),n("code",[s._v("undefined")]),s._v("。")]),s._v(" "),n("p",[s._v("当尝试访问可能不存在的对象属性时，可选链操作符将会使表达式更短、更简明。在探索一个对象的内容时，如果不能确定哪些属性必定存在，可选链操作符也是很有帮助的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const user = {\n    address: {\n        street: 'xx街道',\n        getNum() {\n            return '80号'\n        }\n    }\n}\n\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("在之前的语法中，想获取到深层属性或方法，不得不做前置校验，否则很容易命中 "),n("code",[s._v("Uncaught TypeError: Cannot read property...")]),s._v(" 这种错误，这极有可能让你整个应用挂掉。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const street = user && user.address && user.address.street\nconst num = user && user.address && user.address.getNum && user.address.getNum()\nconsole.log(street, num)\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("用了 Optional Chaining ，上面代码会变成")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const street2 = user?.address?.street\nconst num2 = user?.address?.getNum?.()\nconsole.log(street2, num2)\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("可选链中的 ? 表示如果问号左边表达式有值, 就会继续查询问号后面的字段。根据上面可以看出，用可选链可以大量简化类似繁琐的前置校验操作，而且更安全。")]),s._v(" "),n("h3",{attrs:{id:"常见用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见用法"}},[s._v("#")]),s._v(" 常见用法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('  // 对象中使用\n  let obj = {\n    name: "jimmy",\n    age: "18",\n  };\n  let property = "age";\n  let name = obj?.name;\n  let age = obj?.age;\n  let ages = obj?.[property];\n  let sex = obj?.sex;\n  console.log(name); // jimmy\n  console.log(age); // 18\n  console.log(ages); // 18\n  console.log(sex); // undefined\n\n  // 数组中使用\n  let arr = [1,2,2];\n  let arrayItem = arr?.[42]; // undefined\n\n  // 函数中使用\n  let obj = {\n   func: function () {\n     console.log("I am func");\n   },\n  };\n  obj?.func(); // I am func\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("h3",{attrs:{id:"与空值合并操作符一起使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#与空值合并操作符一起使用"}},[s._v("#")]),s._v(" 与空值合并操作符一起使用")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let customer = {\n  name: "jimmy",\n  details: { age: 18 }\n};\nlet customerCity = customer?.city ?? "成都";\nconsole.log(customerCity); // "成都"\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"注意点-6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意点-6"}},[s._v("#")]),s._v(" 注意点")]),s._v(" "),n("p",[n("strong",[s._v("可选链不能用于赋值")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let object = {};\nobject?.property = 1; // Uncaught SyntaxError: Invalid left-hand side in assignment\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"_3、globalthis"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、globalthis"}},[s._v("#")]),s._v(" 3、globalThis")]),s._v(" "),n("p",[s._v("在以前，从不同的 JavaScript 环境中获取全局对象需要不同的语句。在 Web 中，可以通过 "),n("code",[s._v("window")]),s._v("、"),n("code",[s._v("self")]),s._v(" 取到全局对象，在 Node.js 中，它们都无法获取，必须使用 "),n("code",[s._v("global")]),s._v("。")]),s._v(" "),n("p",[s._v("在松散模式下，可以在函数中返回 "),n("code",[s._v("this")]),s._v(" 来获取全局对象，但是在严格模式和模块环境下，"),n("code",[s._v("this")]),s._v(" 会返回 "),n("code",[s._v("undefined")]),s._v("。")]),s._v(" "),n("p",[s._v("以前想要获取全局对象，可通过一个全局函数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const getGlobal = () => {\n    if (typeof self !== 'undefined') {\n        return self\n    }\n    if (typeof window !== 'undefined') {\n        return window\n    }\n    if (typeof global !== 'undefined') {\n        return global\n    }\n    throw new Error('无法找到全局对象')\n}\n\nconst globals = getGlobal()\nconsole.log(globals)\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("现在"),n("code",[s._v("globalThis")]),s._v(" 提供了一个标准的方式来获取不同环境下的全局 "),n("code",[s._v("this")]),s._v("  对象（也就是全局对象自身）。不像 "),n("code",[s._v("window")]),s._v(" 或者 "),n("code",[s._v("self")]),s._v(" 这些属性，它确保可以在有无窗口的各种环境下正常工作。所以，你可以安心的使用 "),n("code",[s._v("globalThis")]),s._v("，不必担心它的运行环境。")]),s._v(" "),n("p",[s._v("为便于记忆，你只需要记住，全局作用域中的 "),n("code",[s._v("this")]),s._v(" 就是"),n("code",[s._v("globalThis")]),s._v("。以后就用globalThis就行了。")]),s._v(" "),n("h2",{attrs:{id:"_4、bigint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、bigint"}},[s._v("#")]),s._v(" 4、BigInt")]),s._v(" "),n("p",[n("strong",[n("code",[s._v("BigInt")])]),s._v(" 是一种内置对象，它提供了一种方法来表示大于 "),n("code",[s._v("2的53次方 - 1")]),s._v(" 的整数。这原本是 Javascript中可以用 "),n("code",[s._v("Number")]),s._v(" 表示的最大数字。"),n("strong",[n("code",[s._v("BigInt")])]),s._v(" 可以表示任意大的整数。")]),s._v(" "),n("p",[n("strong",[s._v("使用 BigInt 有两种方式：")])]),s._v(" "),n("h3",{attrs:{id:"方式一-数字后面增加n"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方式一-数字后面增加n"}},[s._v("#")]),s._v(" 方式一：数字后面增加n")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const bigInt = 9007199254740993n\nconsole.log(bigInt)\nconsole.log(typeof bigInt) // bigint\n\n// `BigInt` 和 [`Number`]不是严格相等的，但是宽松相等的。\nconsole.log(1n == 1) // true\nconsole.log(1n === 1) // false\n\n// `Number` 和 `BigInt` 可以进行比较。\n1n < 2 // ↪ true\n2n > 1 // ↪ true\n\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"方式二-使用-bigint-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方式二-使用-bigint-函数"}},[s._v("#")]),s._v(" 方式二：使用 BigInt 函数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const bigIntNum = BigInt(9007199254740993n)\nconsole.log(bigIntNum)\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算"}},[s._v("#")]),s._v(" 运算")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let number = BigInt(2);\nlet a = number + 2n; // 4n\nlet b = number * 10n; // 20n\nlet c = number - 10n; // -8n\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"注意点-7"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意点-7"}},[s._v("#")]),s._v(" 注意点")]),s._v(" "),n("p",[s._v("BigInt不能用于 ["),n("code",[s._v("Math")]),s._v("] 对象中的方法；不能和任何 ["),n("code",[s._v("Number")]),s._v("] 实例混合运算，两者必须转换成同一种类型。在两种类型来回转换时要小心，因为 "),n("code",[s._v("BigInt")]),s._v(" 变量在转换成 ["),n("code",[s._v("Number")]),s._v("] 变量时可能会丢失精度。")]),s._v(" "),n("h2",{attrs:{id:"_5、string-prototype-matchall"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、string-prototype-matchall"}},[s._v("#")]),s._v(" 5、String.prototype.matchAll()")]),s._v(" "),n("p",[n("strong",[n("code",[s._v("matchAll()")])]),s._v("  方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const regexp = /t(e)(st(\\d?))/g;\nconst str = \'test1test2\';\n\nconst array = [...str.matchAll(regexp)];\nconsole.log(array[0]);  // ["test1", "e", "st1", "1"]\nconsole.log(array[1]); // ["test2", "e", "st2", "2"]\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"_6、promise-allsettled"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、promise-allsettled"}},[s._v("#")]),s._v(" 6、Promise.allSettled()")]),s._v(" "),n("p",[s._v("我们都知道 Promise.all() 具有并发执行异步任务的能力。但它的最大问题就是如果其中某个任务出现异常(reject)，所有任务都会挂掉，Promise直接进入reject 状态。")]),s._v(" "),n("p",[s._v("场景：现在页面上有三个请求，分别请求不同的数据，如果一个接口服务异常，整个都是失败的，都无法渲染出数据")]),s._v(" "),n("p",[s._v("我们需要一种机制，如果并发任务中，无论一个任务正常或者异常，都会返回对应的的状态，这就是"),n("code",[s._v("Promise.allSettled")]),s._v("的作用")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const promise1 = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve("promise1");\n      //   reject("error promise1 ");\n    }, 3000);\n  });\n};\nconst promise2 = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve("promise2");\n      //   reject("error promise2 ");\n    }, 1000);\n  });\n};\nconst promise3 = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      //   resolve("promise3");\n      reject("error promise3 ");\n    }, 2000);\n  });\n};\n\n//  Promise.all 会走到catch里面\nPromise.all([promise1(), promise2(), promise3()])\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((error) => {\n    console.log("error", error); // error promise3\n  });\n\n// Promise.allSettled 不管有没有错误，三个的状态都会返回\nPromise.allSettled([promise1(), promise2(), promise3()])\n  .then((res) => {\n    console.log(res);\n    // 打印结果\n    // [\n    //    {status: \'fulfilled\', value: \'promise1\'},\n    //    {status: \'fulfilled\',value: \'promise2\'},\n    //    {status: \'rejected\', reason: \'error promise3 \'}\n    // ]\n  })\n  .catch((error) => {\n    console.log("error", error);\n  });\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br")])]),n("h2",{attrs:{id:"_7、dynamic-import-按需-import"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、dynamic-import-按需-import"}},[s._v("#")]),s._v(" 7、Dynamic Import（按需 import）")]),s._v(" "),n("p",[n("code",[s._v("import()")]),s._v("可以在需要的时候，再加载某个模块。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("button.addEventListener('click', event => {\n  import('./dialogBox.js')\n  .then(dialogBox => {\n    dialogBox.open();\n  })\n  .catch(error => {\n    /* Error handling */\n  })\n});\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("import()")]),s._v("方法放在"),n("code",[s._v("click")]),s._v("事件的监听函数之中，只有用户点击了按钮，才会加载这个模块。")]),s._v(" "),n("h1",{attrs:{id:"六、es2021-es12"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、es2021-es12"}},[s._v("#")]),s._v(" 六、ES2021(ES12)")]),s._v(" "),n("h2",{attrs:{id:"_1、逻辑运算符和赋值表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、逻辑运算符和赋值表达式"}},[s._v("#")]),s._v(" 1、逻辑运算符和赋值表达式（&&=，||=，??=）")]),s._v(" "),n("h3",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")]),s._v(" &&=")]),s._v(" "),n("p",[s._v("逻辑与赋值 "),n("code",[s._v("x &&= y")]),s._v("等效于：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("x && (x = y);\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("上面的意思是，当x为真时，x=y。 具体请看下面的示例:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let a = 1;\nlet b = 0;\n\na &&= 2;\nconsole.log(a); // 2\n\nb &&= 2;\nconsole.log(b);  // 0\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[s._v("#")]),s._v(" ||=")]),s._v(" "),n("p",[s._v("逻辑或赋值（"),n("code",[s._v("x ||= y")]),s._v("）运算仅在 "),n("code",[s._v("x")]),s._v(" 为false时赋值。")]),s._v(" "),n("p",[n("strong",[n("code",[s._v("x ||= y")]),s._v(" 等同于：x || (x = y);")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const a = { duration: 50, title: '' };\n\na.duration ||= 10;\nconsole.log(a.duration); // 50\n\na.title ||= 'title is empty.';\nconsole.log(a.title); // \"title is empty\"\n\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[s._v("#")]),s._v(" ??=")]),s._v(" "),n("p",[s._v("逻辑空赋值运算符 ("),n("code",[s._v("x ??= y")]),s._v(") 仅在 "),n("code",[s._v("x")]),s._v(" 是 "),n("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FGlossary%2FNullish",target:"_blank",rel:"noopener noreferrer"}},[s._v("nullish"),n("OutboundLink")],1),s._v(" ("),n("code",[s._v("null")]),s._v(" 或 "),n("code",[s._v("undefined")]),s._v(") 时对其赋值。")]),s._v(" "),n("p",[n("strong",[n("code",[s._v("x ??= y")]),s._v(" 等价于： x ?? (x = y);")])]),s._v(" "),n("p",[n("strong",[s._v("示例一")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const a = { duration: 50 };\n\na.duration ??= 10;\nconsole.log(a.duration); // 50\n\na.speed ??= 25;\nconsole.log(a.speed); // 25\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[n("strong",[s._v("示例二")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function config(options) {\n  options.duration ??= 100;\n  options.speed ??= 25;\n  return options;\n}\n\nconfig({ duration: 125 }); // { duration: 125, speed: 25 }\nconfig({}); // { duration: 100, speed: 25 }\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"_2、string-prototype-replaceall"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、string-prototype-replaceall"}},[s._v("#")]),s._v(" 2、String.prototype.replaceAll()")]),s._v(" "),n("h3",{attrs:{id:"介绍-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-3"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),n("p",[n("code",[s._v("replaceAll()")]),s._v("  方法返回一个新字符串，新字符串中所有满足 "),n("code",[s._v("pattern")]),s._v(" 的部分都会被"),n("code",[s._v("replacement")]),s._v(" 替换。"),n("code",[s._v("pattern")]),s._v("可以是一个字符串或一个"),n("code",[s._v("RegExp")]),s._v("，"),n("code",[s._v("replacement")]),s._v("可以是一个字符串或一个在每次匹配被调用的函数。")]),s._v(" "),n("p",[s._v("原始字符串保持不变。")]),s._v(" "),n("h3",{attrs:{id:"示例-7"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-7"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("'aabbcc'.replaceAll('b', '.'); // 'aa..cc'\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("使用正则表达式搜索值时，它必须是全局的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("'aabbcc'.replaceAll(/b/, '.');\nTypeError: replaceAll must be called with a global RegExp\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("这将可以正常运行:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("'aabbcc'.replaceAll(/b/g, '.');\n\"aa..cc\"\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"数字分隔符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数字分隔符"}},[s._v("#")]),s._v(" "),n("strong",[s._v("数字分隔符")])]),s._v(" "),n("p",[s._v("欧美语言中，较长的数值允许每三位添加一个分隔符（通常是一个逗号），增加数值的可读性。比如，"),n("code",[s._v("1000")]),s._v("可以写作"),n("code",[s._v("1,000")]),s._v("。")]),s._v(" "),n("p",[n("code",[s._v("ES2021")]),s._v("中允许 JavaScript 的数值使用下划线（"),n("code",[s._v("_")]),s._v("）作为分隔符。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let budget = 1_000_000_000_000;\nbudget === 10 ** 12 // true\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("这个数值分隔符没有指定间隔的位数，也就是说，可以每三位添加一个分隔符，也可以每一位、每两位、每四位添加一个。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("123_00 === 12_300 // true\n\n12345_00 === 123_4500 // true\n12345_00 === 1_234_500 // true\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("小数和科学计数法也可以使用数值分隔符。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 小数\n0.000_001\n\n// 科学计数法\n1e10_000\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("数值分隔符有几个使用注意点。")]),s._v(" "),n("ul",[n("li",[s._v("不能放在数值的最前面（leading）或最后面（trailing）。")]),s._v(" "),n("li",[s._v("不能两个或两个以上的分隔符连在一起。")]),s._v(" "),n("li",[s._v("小数点的前后不能有分隔符。")]),s._v(" "),n("li",[s._v("科学计数法里面，表示指数的"),n("code",[s._v("e")]),s._v("或"),n("code",[s._v("E")]),s._v("前后不能有分隔符。")])]),s._v(" "),n("p",[s._v("下面的写法都会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 全部报错\n3_.141\n3._141\n1_e12\n1e_12\n123__456\n_1464301\n1464301_\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"_3、promise-any"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、promise-any"}},[s._v("#")]),s._v(" 3、"),n("strong",[s._v("Promise.any")])]),s._v(" "),n("p",[s._v("方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const promise1 = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve("promise1");\n      //  reject("error promise1 ");\n    }, 3000);\n  });\n};\nconst promise2 = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve("promise2");\n      // reject("error promise2 ");\n    }, 1000);\n  });\n};\nconst promise3 = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve("promise3");\n      // reject("error promise3 ");\n    }, 2000);\n  });\n};\nPromise.any([promise1(), promise2(), promise3()])\n  .then((first) => {\n    // 只要有一个请求成功 就会返回第一个请求成功的\n    console.log(fimu\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("p",[s._v("只要参数实例有一个变成"),n("code",[s._v("fulfilled")]),s._v("状态，包装实例就会变成"),n("code",[s._v("fulfilled")]),s._v("状态；如果所有参数实例都变成"),n("code",[s._v("rejected")]),s._v("状态，包装实例就会变成"),n("code",[s._v("rejected")]),s._v("状态。")]),s._v(" "),n("p",[n("code",[s._v("Promise.any()")]),s._v("跟"),n("code",[s._v("Promise.race()")]),s._v("方法很像，只有一点不同，就是"),n("code",[s._v("Promise.any()")]),s._v("不会因为某个 Promise 变成"),n("code",[s._v("rejected")]),s._v("状态而结束，必须等到所有参数 Promise 变成"),n("code",[s._v("rejected")]),s._v("状态才会结束。")]),s._v(" "),n("h2",{attrs:{id:"_4、weakref-and-finalizers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、weakref-and-finalizers"}},[s._v("#")]),s._v(" 4、WeakRef and Finalizers")]),s._v(" "),n("p",[s._v("这两个新特性，都应该尽量避免使用，所以这里不做过多的讲解。如感兴趣，请参考")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FWeakRef",target:"_blank",rel:"noopener noreferrer"}},[s._v("WeakRef"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FFinalizationRegistry",target:"_blank",rel:"noopener noreferrer"}},[s._v("Finalizers"),n("OutboundLink")],1)]),s._v(" "),n("h1",{attrs:{id:"写在最后"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[s._v("#")]),s._v(" 写在最后")]),s._v(" "),n("p",[s._v("本人水平有限，如有错误，欢迎评论区指出。(ps:"),n("code",[s._v("ES6")]),s._v("系列正在写)")]),s._v(" "),n("p",[s._v("作者：Jimmy_fx")]),s._v(" "),n("p",[s._v("链接：https://juejin.cn/post/7046217976176967711")]),s._v(" "),n("p",[s._v("来源：稀土掘金")]),s._v(" "),n("p",[s._v("著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),s._v(" "),n("hr")])}),[],!1,null,null,null);a.default=t.exports}}]);